#!/usr/bin/env python3

from __future__ import division, print_function, unicode_literals

import argparse
import collections
import glob
import os
import platform
import subprocess
import sys

sys.path.append(os.path.join(os.path.dirname(__file__), "build", "lib", "scripts"))
try:
    import cfg
except ImportError:
    pass

str = type("")  # For Python2


def main():
    os.chdir(os.path.dirname(sys.argv[0]))
    progname = sys.argv[0]
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("-m",
                        "--mode",
                        metavar="MODE",
                        type=str,
                        choices="dbg dev opt".split(),
                        default="opt",
                        help="set build configuration:\n"
                        "  - opt: compile for fast binaries (default)\n"
                        "  - dev: compile for fast builds\n"
                        "  - dbg: add debugging symbols")
    parser.add_argument("-o",
                        "--target-os",
                        metavar="OS",
                        type=str,
                        help="target os (default: host os)")
    args = parser.parse_args()

    check_submodules()
    check_host()
    check_target(args)
    check_tools()

    with cfg.step("configure mode") as msg:
        msg(args.mode, color="green")
    cfg.gn(mode=args.mode, target_os=args.target_os)

    print("make(1) it so!")


def check_submodules():
    if not os.path.exists(os.path.join("build/lib", ".git")):
        print("The build submodule is missing. Run:")
        print("  $ git submodule update --init")
        sys.exit(1)


def check_host():
    with cfg.step("checking host os") as msg:
        if cfg.host_os() in ["mac", "linux"]:
            msg(cfg.host_os(), color="green")
        else:
            msg(cfg.host_os(), color="red")
            sys.exit(1)


def check_target(args):
    with cfg.step("checking target os") as msg:
        if args.target_os is None:
            args.target_os = cfg.host_os()
        if (cfg.host_os(), args.target_os) not in {
            ("mac", "mac"),
            ("linux", "linux"),
        }:
            msg(args.target_os, color="red")
            sys.exit(1)
        msg(args.target_os, color="green")


def check_tools():
    if not (cfg.check_clang() and cfg.check_gn() and cfg.check_ninja()):
        sys.exit(1)


if __name__ == "__main__":
    main()
