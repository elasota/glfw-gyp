declare_args() {
  if (target_os == "linux" && rebase_path(".", "//") != ".") {
    libglfw = "system"
  } else {
    libglfw = "bundled"
  }
}
assert(libglfw == "system" || libglfw == "bundled")

if (libglfw == "bundled") {
  static_library("libglfw") {
    sources = [
      "glfw-3.3.2/src/context.c",
      "glfw-3.3.2/src/init.c",
      "glfw-3.3.2/src/input.c",
      "glfw-3.3.2/src/monitor.c",
      "glfw-3.3.2/src/window.c",
    ]

    if (target_os == "mac") {
      sources += [
        "glfw-3.3.2/src/cocoa_init.m",
        "glfw-3.3.2/src/cocoa_joystick.m",
        "glfw-3.3.2/src/cocoa_monitor.m",
        "glfw-3.3.2/src/cocoa_time.c",
        "glfw-3.3.2/src/cocoa_window.m",
        "glfw-3.3.2/src/egl_context.c",
        "glfw-3.3.2/src/nsgl_context.m",
        "glfw-3.3.2/src/osmesa_context.c",
        "glfw-3.3.2/src/posix_thread.c",
        "glfw-3.3.2/src/vulkan.c",
      ]
    } else if (target_os == "linux") {
      sources += [
        "glfw-3.3.2/src/glx_context.c",
        "glfw-3.3.2/src/linux_joystick.c",
        "glfw-3.3.2/src/posix_thread.c",
        "glfw-3.3.2/src/posix_time.c",
        "glfw-3.3.2/src/x11_init.c",
        "glfw-3.3.2/src/x11_monitor.c",
        "glfw-3.3.2/src/x11_window.c",
        "glfw-3.3.2/src/xkb_unicode.c",
      ]
    }

    public_configs = [ ":libglfw_public" ]
    configs += [ ":libglfw_private" ]
  }

  config("libglfw_public") {
    include_dirs = [ "glfw-3.3.2/include" ]
    if (target_os == "mac") {
      libs = [
        "Cocoa.framework",
        "CoreVideo.framework",
        "IOKit.framework",
        "OpenGL.framework",
      ]
    } else if (target_os == "linux") {
      libs = [
        "GL",
        "GLU",
        "m",
        "pthread",
        "X11",
        "Xcursor",
        "Xinerama",
        "Xxf86vm",
        "Xrandr",
      ]
    }
  }

  config("libglfw_private") {
    cflags = [
      "-Wall",
      "-Wno-deprecated-declarations",
    ]
    defines = [ "_GLFW_USE_CONFIG_H" ]
    include_dirs = [
      "glfw-3.3.2/src",
      "glfw-3.3.2/include",
      "glfw-3.3.2/deps",
    ]
    if (target_os == "mac") {
      include_dirs += [ "src/mac" ]
    } else if (target_os == "linux") {
      include_dirs += [ "src/linux" ]
    }
  }

  executable("boing") {
    sources = [
      "glfw-3.3.2/deps/glad_gl.c",
      "glfw-3.3.2/examples/boing.c",
    ]
    deps = [ ":libglfw" ]
    configs += [ ":libglfw_private" ]
  }

  executable("gears") {
    sources = [
      "glfw-3.3.2/deps/glad_gl.c",
      "glfw-3.3.2/examples/gears.c",
    ]
    deps = [ ":libglfw" ]
    configs += [ ":libglfw_private" ]
  }

  executable("wave") {
    sources = [
      "glfw-3.3.2/deps/glad_gl.c",
      "glfw-3.3.2/examples/wave.c",
    ]
    deps = [ ":libglfw" ]
    configs += [ ":libglfw_private" ]
  }
} else {
  import("//build/lib/pkg_config.gni")

  pkg_config("libglfw_public") {
    lib = "glfw3"
  }

  source_set("libglfw") {
    configs += [ ":libglfw_public" ]
  }
}
